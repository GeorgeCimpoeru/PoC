        -:    0:Source:src/GenerateFrames.cpp
        -:    0:Graph:./GenerateFrames.gcno
        -:    0:Data:./GenerateFrames.gcda
        -:    0:Runs:1
        -:    1:#include "../include/GenerateFrames.h"
        -:    2:
       39:    3:GenerateFrames::GenerateFrames(int socket)
        -:    4:{
       39:    5:    this->addSocket(socket);
       39:    6:}
        -:    7:
        1:    8:int GenerateFrames::getSocket()
        -:    9:{
        1:   10:    return this->socket;
        -:   11:}
        -:   12:
       42:   13:struct can_frame GenerateFrames::createFrame(int &id,  std::vector<int> &data, FrameType frameType)
        -:   14:{
        -:   15:    struct can_frame frame;
       42:   16:    switch (frameType)
        -:   17:    {
       41:   18:        case DATA_FRAME:
       41:   19:            frame.can_id = id & CAN_EFF_MASK;
       41:   20:            frame.can_dlc = data.size();
      237:   21:            for (int i = 0; i < frame.can_dlc; i++)
        -:   22:            {
      196:   23:                frame.data[i] = data[i];
        -:   24:            }
       41:   25:            break;
        1:   26:        case REMOTE_FRAME:
        1:   27:            frame.can_id = id & CAN_EFF_MASK;
        1:   28:            frame.can_id |= CAN_RTR_FLAG;
        1:   29:            frame.can_dlc = data.size();
        2:   30:            for (int i = 0; i < frame.can_dlc; i++) 
        -:   31:            {
        1:   32:                frame.data[i] = data[i];
        -:   33:            }
        1:   34:            break;
    #####:   35:        default:
    #####:   36:            throw std::invalid_argument("Invalid frame type");
        -:   37:    }
       42:   38:    return frame;
        -:   39:}
        -:   40:
       42:   41:bool GenerateFrames::sendFrame(int id, std::vector<int> data, FrameType frameType)
        -:   42:{
       42:   43:    struct can_frame frame = createFrame(id, data, frameType);
       42:   44:    int nbytes = write(this->socket, &frame, sizeof(frame));
       42:   45:    if (nbytes != sizeof(frame))
        -:   46:    {
    #####:   47:        std::cout<<"Write error\n";
    #####:   48:        return -1;
        -:   49:    }
       42:   50:    return 0;
        -:   51:}
        -:   52:
       39:   53:void GenerateFrames::addSocket(int socket)
        -:   54:{
       39:   55:    if (socket >= 0)
        -:   56:    {
       39:   57:        this->socket = socket;
       39:   58:        return;
        -:   59:    }
    #####:   60:    std::cout<<"Error: Pass a valid Socket\n";
    #####:   61:    exit(EXIT_FAILURE);
        -:   62:}
        -:   63:
        2:   64:void GenerateFrames::sessionControl(int id, int sub_function, bool response)
        -:   65:{
        4:   66:    std::vector<int> data(3);
        2:   67:    if (!response)
        -:   68:    {
        1:   69:        data = {0x2,0x10,sub_function};
        1:   70:        this->sendFrame(id,data);
        1:   71:        return;
        -:   72:    }
        1:   73:    data = {0x2,0x50,sub_function};
        1:   74:    this->sendFrame(id, data);
        1:   75:    return;
        -:   76:}
        -:   77:
        2:   78:void GenerateFrames::ecuReset(int id, bool response)
        -:   79:{
        4:   80:    std::vector<int> data(3);
        2:   81:    if (!response)
        -:   82:    {
        1:   83:        data = {0x2,0x11,0x3};
        1:   84:        this->sendFrame(id, data);
        1:   85:        return;
        -:   86:    }
        1:   87:    data = {0x2,0x51,0x3};
        1:   88:    this->sendFrame(id, data);
        1:   89:    return;
        -:   90:}
        -:   91:
        2:   92:void GenerateFrames::authenticationRequestSeed(int id, const std::vector<int> &seed)
        -:   93:{
        2:   94:    if (seed.size() == 0)
        -:   95:    {
        1:   96:        std::vector<int> data = {0x03, 0x29, 0x1};
        1:   97:        this->sendFrame(id, data);
        1:   98:        return;
        -:   99:    }
        2:  100:    std::vector<int> data = {(int)seed.size() + 2, 0x69, 0x1};
        4:  101:    for (std::size_t i = 0; i < seed.size(); i++)
        -:  102:    {
        3:  103:        data.push_back(seed[i]);
        -:  104:    }
        1:  105:    this->sendFrame(id, data);
        1:  106:    return;
        -:  107:}
        -:  108:
        2:  109:void GenerateFrames::authenticationSendKey(int id, const std::vector<int> &key)
        -:  110:{
        2:  111:    if (key.size() > 0 )
        -:  112:    {
        1:  113:        std::vector<int> data = {(int)key.size() + 2, 0x29, 0x2};
        4:  114:        for (std::size_t i = 0; i<key.size(); i++)
        -:  115:        {
        3:  116:            data.push_back(key[i]);
        -:  117:        }
        1:  118:        this->sendFrame(id, data);
        1:  119:        return;
        -:  120:    }
        2:  121:    std::vector<int> data = {0x02,0x69,0x02};
        1:  122:    this->sendFrame(id, data);
        1:  123:    return;
        -:  124:}
        -:  125:
        2:  126:void GenerateFrames::routineControl(int id, int sub_function, int routin_identifier, bool response)
        -:  127:{
        2:  128:    if (!response)
        -:  129:    {
        1:  130:        std::vector<int> data = {0x4, 0x31, sub_function, routin_identifier / 0x100, routin_identifier % 0x100};
        1:  131:        this->sendFrame(id, data);
        1:  132:        return;
        -:  133:    }
        2:  134:    std::vector<int> data = {0x04,0x71, sub_function, routin_identifier / 0x100, routin_identifier % 0x100};
        1:  135:    this->sendFrame(id, data);
        1:  136:    return;
        -:  137:}
        -:  138:
        2:  139:void GenerateFrames::testerPresent(int id, bool response)
        -:  140:{
        2:  141:    if (!response)
        -:  142:    {
        1:  143:        std::vector<int> data = {0x02,0x3E,0x00};
        1:  144:        this->sendFrame(id, data);
        1:  145:        return;
        -:  146:    }
        2:  147:    std::vector<int> data = {0x02,0x7E,0x00};
        1:  148:    this->sendFrame(id, data);
        1:  149:    return;
        -:  150:}
        -:  151:
        2:  152:void GenerateFrames::readDataByIdentifier(int id,int identifier, std::vector<int> response )
        -:  153:{
        2:  154:    if (response.size() == 0)
        -:  155:    {
        1:  156:        std::vector<int> data = {0x03, 0x22, identifier/0x100, identifier%0x100};
        1:  157:        this->sendFrame(id, data);
        1:  158:        return;
        -:  159:    }
        1:  160:    int length_response = response.size();
        1:  161:    if (length_response <= 5)
        -:  162:    {
        1:  163:        std::vector<int> data = {length_response + 3, 0x62, identifier/0x100, identifier%0x100};
        3:  164:        for (int i = 0; i < length_response; i++)
        -:  165:        {
        2:  166:            data.push_back(response[i]);
        -:  167:        }
        1:  168:        this->sendFrame(id, data);
        1:  169:        return;
        -:  170:    }
    #####:  171:    std::cout<<"ERROR: The frame is to long!, consider using method ReadDataByIdentifierLongResponse\n";
    #####:  172:    return;
        -:  173:    /*
        -:  174:    *According to documentation, the frame can
        -:  175:    *request more than one DID. Future implementation
        -:  176:    *  |
        -:  177:    *  V
        -:  178:    */
        -:  179:}
        -:  180:
        4:  181:void GenerateFrames::generateFrameLongData(int id, int sid, int identifier, std::vector<int> response, bool first_frame)
        -:  182:{
        4:  183:    if (first_frame)
        -:  184:    {
        2:  185:        std::vector<int> data = {0x10, (int)response.size() + 3, sid, identifier/0x100, identifier%0x100};
        -:  186:        /* Send only 3 first bytes of data */
        8:  187:        for (int i = 0; i < 3; i++)
        -:  188:        {
        6:  189:            data.push_back(response[i]);
        -:  190:        }
        2:  191:        this->sendFrame(id, data);
        2:  192:        return;
        -:  193:    }
        -:  194:    else
        -:  195:    {
        -:  196:        /* Delete first 3 data that were sended in the first frame */
        2:  197:        response.erase(response.begin(), response.begin() + 3);
        2:  198:        int size_of_response = response.size();
        2:  199:        std::vector<int> data;
        4:  200:        for (int i = 0; i <= size_of_response / 7; i++)
        -:  201:        {
        2:  202:            data = {0x21 + (i % 0xF)};
       10:  203:            for (int j = 0; j < 7 && ((i*7) + j) < size_of_response; j++)
        -:  204:            {
        8:  205:                data.push_back(response[(i*7)+j]);
        -:  206:            }
        2:  207:            this->sendFrame(id, data);
        -:  208:        }
        2:  209:        return;
        -:  210:    } 
        -:  211:}
        -:  212:
        2:  213:void GenerateFrames::readDataByIdentifierLongResponse(int id,int identifier, std::vector<int> response, bool first_frame)
        -:  214:{
        2:  215:    generateFrameLongData(id,0x62,identifier,response,first_frame);
        2:  216:}
        -:  217:
        1:  218:void GenerateFrames::flowControlFrame(int id)
        -:  219:{
        1:  220:    this->sendFrame(id, {0x30,0x00,0x00,0x00});
        1:  221:}
        -:  222:
        2:  223:void GenerateFrames::readMemoryByAddress(int id, int memory_size, int memory_address, std::vector<int> response )
        -:  224:{
        -:  225:    /* add lengths of of memory size/address to the frame */
        2:  226:    int length_memory_size = (countDigits(memory_size) +1) / 2;
        2:  227:    int length_memory_address = (countDigits(memory_address) + 1) / 2;
        2:  228:    int length_memory = length_memory_size * 0x10 + length_memory_address;
        2:  229:    if (response.size() == 0)
        -:  230:    {
        1:  231:        int pci_l = length_memory_size + length_memory_address + 2;
        1:  232:        std::vector<int> data = {pci_l, 0x23, length_memory};
        -:  233:        /* add memory address and size to the frame */
        1:  234:        insertBytes(data, memory_address, length_memory_address);
        1:  235:        insertBytes(data, memory_size, length_memory_size);
        1:  236:        this->sendFrame(id, data);
        1:  237:        return;
        -:  238:    }
        1:  239:    int pci_l = length_memory_size + length_memory_address + 2 + response.size();
        2:  240:    std::vector<int> data = {pci_l, 0x63, length_memory};
        -:  241:    /* add memory address and size to the frame */
        1:  242:    insertBytes(data, memory_address, length_memory_address);
        1:  243:    insertBytes(data, memory_size, length_memory_size);
        1:  244:    if (data.size() + response.size() < 9)
        -:  245:    {
        3:  246:        for (std::size_t i = 0; i < response.size(); i++)
        -:  247:        {
        2:  248:            data.push_back(response[i]);
        -:  249:        }
        1:  250:        this->sendFrame(id, data);
        1:  251:        return;
        -:  252:    } else
        -:  253:    {
    #####:  254:        std::cout<<"ERROR: Response to long, consider using ReadMemoryByAdressLongResponse method\n";
    #####:  255:        return;
        -:  256:    }
        -:  257:}
        -:  258:
        2:  259:void GenerateFrames::readMemoryByAddressLongResponse(int id, int memory_size, int memory_address, std::vector<int> response, bool first_frame)
        -:  260:{
        -:  261:    /* add lengths of of memory size/address to the frame */
        2:  262:    int length_memory_size = (countDigits(memory_size) +1) / 2;
        2:  263:    int length_memory_address = (countDigits(memory_address) + 1) / 2;
        2:  264:    int length_memory = length_memory_size * 0x10 + length_memory_address;
        2:  265:    if (first_frame)
        -:  266:    {
        1:  267:        int pci_l = (int)response.size() + 2 + length_memory_size + length_memory_address;
        1:  268:        std::vector<int> data = {0x10, pci_l, 0x63, length_memory};
        -:  269:        /* add memory address and size to the frame */
        1:  270:        insertBytes(data, memory_address, length_memory_address);
        1:  271:        insertBytes(data, memory_size, length_memory_size);
        -:  272:        /* Send only 3 first bytes of data */
        2:  273:        for (std::size_t i = 0; i < (data.size() - 8); i++)
        -:  274:        {
        1:  275:            data.push_back(response[i]);
        -:  276:        }
        1:  277:        this->sendFrame(id, data);
        1:  278:        return;
        -:  279:    }
        -:  280:    else
        -:  281:    {
        1:  282:        int memory_allready_send = 8 - (length_memory_address + length_memory_size + 4);
        -:  283:        /* Delete data allready sended */
        1:  284:        response.erase(response.begin(), response.begin() + memory_allready_send);
        1:  285:        int size_of_response = response.size();
        1:  286:        std::vector<int> data;
        2:  287:        for (int i = 0; i <= size_of_response / 7; i++)
        -:  288:        {
        1:  289:            data = {0x21 + (i % 0xF)};
        6:  290:            for (int j = 0; j < 7 && ((i*7) + j) < size_of_response; j++)
        -:  291:            {
        5:  292:                data.push_back(response[(i*7)+j]);
        -:  293:            }
        1:  294:            this->sendFrame(id, data);
        -:  295:        }
        1:  296:        return;
        -:  297:    } 
        -:  298:    return;
        -:  299:}
        -:  300:
        2:  301:void GenerateFrames::writeDataByIdentifier(int id, int identifier, std::vector<int> data_parameter )
        -:  302:{
        2:  303:    if (data_parameter.size() > 0)
        -:  304:    {
        1:  305:        if (data_parameter.size() <= 4)
        -:  306:        {
        1:  307:            std::vector<int> data = {(int)data_parameter.size() + 3,0x2E, identifier/0x100,identifier%0x100};
        3:  308:            for (int j = 0; j < data_parameter.size(); j++)
        -:  309:            {
        2:  310:                data.push_back(data_parameter[j]);
        -:  311:            }
        1:  312:            this->sendFrame(id, data);
        1:  313:            return;
        -:  314:        }
        -:  315:        else
        -:  316:        {
    #####:  317:            std::cout<<"The data_parameter is to long. Consider using WriteDataByIdentifierLongData method\n";
    #####:  318:            return;
        -:  319:        }
        -:  320:    }
        2:  321:    std::vector<int> data = {0x03, 0x6E, identifier/0x100,identifier%0x100};
        1:  322:    this->sendFrame(id, data);
        1:  323:    return;
        -:  324:}
        -:  325:
        2:  326:void GenerateFrames::writeDataByIdentifierLongData(int id, int identifier, std::vector<int> data_parameter, bool first_frame)
        -:  327:{
        2:  328:    generateFrameLongData(id,0x2E,identifier,data_parameter,first_frame);
        2:  329:}
        -:  330:
        1:  331:void GenerateFrames::readDtcInformation(int id, int sub_function, int dtc_status_mask)
        -:  332:{
        2:  333:    std::vector<int> data = {0x03, 0x19, sub_function, dtc_status_mask};
        1:  334:    this->sendFrame(id, data);
        2:  335:    return;
        -:  336:}
        -:  337:
        1:  338:void GenerateFrames::readDtcInformationResponse01(int id, int status_availability_mask, int dtc_format_identifier, int dtc_count)
        -:  339:{
        2:  340:    std::vector<int> data = {0x03, 0x59, 0x01, status_availability_mask, dtc_format_identifier, dtc_count};
        1:  341:    this->sendFrame(id, data);
        2:  342:    return;
        -:  343:}
        -:  344:
        2:  345:void GenerateFrames::clearDiagnosticInformation(int id, std::vector<int> group_of_dtc, bool response)
        -:  346:{
        4:  347:    std::vector<int> data;
        -:  348:    /* Request */
        2:  349:    if (!response)
        -:  350:    { 
        1:  351:        if (group_of_dtc.size() < 8)
        -:  352:        {
        1:  353:            int number_of_dtc = group_of_dtc.size();
        1:  354:            data = {number_of_dtc + 1, 0x14};
        4:  355:            for (int i = 0; i < number_of_dtc; i++)
        -:  356:            {
        3:  357:                data.push_back(group_of_dtc[i]);
        -:  358:            }
        1:  359:            this->sendFrame(id, data);
        1:  360:            return;
        -:  361:        } else
        -:  362:        {
    #####:  363:            std::cout<<"ERROR: Can't send more than 7 DTC/frame, please consider send 2 or more frames\n";
    #####:  364:            return;
        -:  365:        }
        -:  366:        
        -:  367:    }
        -:  368:    /* Response */
        1:  369:    data = {0x01, 0x54};
        1:  370:    this->sendFrame(id, data);
        1:  371:    return;
        -:  372:}
        -:  373:
        2:  374:void GenerateFrames::accessTimingParameters(int id, int sub_function, bool response)
        -:  375:{
        2:  376:    if (!response)
        -:  377:    {
        1:  378:        std::vector<int> data = {0x02, 0x83, sub_function};
        1:  379:        this->sendFrame(id, data);
        1:  380:        return;
        -:  381:    }
        2:  382:    std::vector<int> data = {0x02, 0xC3, sub_function};
        1:  383:    this->sendFrame(id, data);
        1:  384:    return;
        -:  385:}
        -:  386:
        1:  387:void GenerateFrames::negativeResponse(int id, int sid, int nrc)
        -:  388:{
        2:  389:    std::vector<int> data = {0x03, 0x7F, sid, nrc};
        1:  390:    this->sendFrame(id, data);
        2:  391:    return;
        -:  392:}
        -:  393:
        1:  394:void GenerateFrames::requestDownload(int id, int data_format_identifier, int memory_address, int memory_size)
        -:  395:{
        -:  396:    /* Request Frame add lengths of of memory size/address to the frame */
        1:  397:    int length_memory_size = countDigits(memory_size + 1) / 2;
        1:  398:    int length_memory_address = countDigits(memory_address + 1) / 2;
        1:  399:    int length_memory = length_memory_size * 0x10 + length_memory_address;
        1:  400:    int pci_length = length_memory_size + length_memory_address + 3;
        2:  401:    std::vector<int> data = {pci_length, 0x34, data_format_identifier, length_memory};
        -:  402:    /* add memory address and size to the frame */
        1:  403:    insertBytes(data, memory_address, length_memory_address);
        1:  404:    insertBytes(data, memory_size, length_memory_size);
        1:  405:    this->sendFrame(id, data);
        2:  406:    return;
        -:  407:}
        -:  408:
        1:  409:void GenerateFrames::requestDownloadResponse(int id, int max_number_block)
        -:  410:{
        -:  411:    /* Response frame */
        1:  412:    int length_max_number_block = (countDigits(max_number_block) + 1) / 2;
        2:  413:    std::vector<int> data = {length_max_number_block + 2, 0x74, (length_max_number_block * 0x10)};
        1:  414:    insertBytes(data, max_number_block, length_max_number_block);
        1:  415:    this->sendFrame(id, data);
        2:  416:    return;
        -:  417:}
        -:  418:
        3:  419:void GenerateFrames::transferData(int id, int block_sequence_counter, std::vector<int> transfer_request)
        -:  420:{
        -:  421:    /* If is not a response */
        3:  422:    if (transfer_request.size() != 0)
        -:  423:    {
        2:  424:        std::vector<int> data = {(int)transfer_request.size() + 2, 0x36, block_sequence_counter};
       10:  425:        for (std::size_t i = 0; i < transfer_request.size(); i++)
        -:  426:        {
        8:  427:            data.push_back(transfer_request[i]);
        -:  428:        }
        2:  429:        this->sendFrame(id, data);
        2:  430:        return;
        -:  431:    }
        -:  432:    /* Response frame */
        2:  433:    std::vector<int> data = {0x02,0x76,block_sequence_counter};
        1:  434:    this->sendFrame(id, data);
        1:  435:    return;
        -:  436:}
        -:  437:
        2:  438:void GenerateFrames::transferDataLong(int id, int block_sequence_counter, std::vector<int> transfer_request, bool first_frame)
        -:  439:{
        2:  440:    if (first_frame)
        -:  441:    {
        1:  442:        std::vector<int> data = {0x10, ((int)transfer_request.size() + 2), 0x36, block_sequence_counter};
        5:  443:        for (int i = 0; i < 4 ; i++)
        -:  444:        {
        4:  445:            data.push_back(transfer_request[i]);
        -:  446:        }
        1:  447:        this->sendFrame(id, data);
        1:  448:        return;
        -:  449:    }
        -:  450:    else
        -:  451:    {
        -:  452:        /* Delete first 3 data that were sended in the first frame */
        1:  453:        transfer_request.erase(transfer_request.begin(), transfer_request.begin() + 4);
        1:  454:        int size_of_data = transfer_request.size();
        1:  455:        std::vector<int> data;
        2:  456:        for (int i = 0; i <= size_of_data / 7; i++)
        -:  457:        {
        1:  458:            data = {0x21 + (i % 0xF)};
        4:  459:            for (int j = 0; j < 7 && ((i*7) + j) < size_of_data; j++)
        -:  460:            {
        3:  461:                data.push_back(transfer_request[(i*7)+j]);
        -:  462:            }
        1:  463:            this->sendFrame(id, data);
        -:  464:        }
        1:  465:        return;
        -:  466:    } 
        -:  467:}
        -:  468:
        2:  469:void GenerateFrames::requestTransferExit(int id, bool response)
        -:  470:{
        2:  471:    if (!response)
        -:  472:    {
        1:  473:        std::vector<int> data = {0x01, 0x37};
        1:  474:        this->sendFrame(id, data);
        1:  475:        return;
        -:  476:    }
        2:  477:    std::vector<int> data = {0x01,0x77};
        1:  478:    this->sendFrame(id, data);
        1:  479:    return;
        -:  480:}
        -:  481:
    #####:  482:bool GenerateFrames::requestUpdateStatus(int id, bool response)
        -:  483:{
        -:  484:    /* No impplementation, I don't find this service in the standart */
    #####:  485:    return false;
        -:  486:}
        -:  487:
        -:  488:/* Private */
       11:  489:int GenerateFrames::countDigits(int number)
        -:  490:{
       11:  491:    int digits = 0;
       11:  492:    if (number < 0) 
    #####:  493:        digits = 1;
       42:  494:    while (number) {
       31:  495:        number /= 10;
       31:  496:        digits++;
        -:  497:    }
       11:  498:    return digits;
        -:  499:}
        -:  500:
        9:  501:void GenerateFrames::insertBytes(std::vector<int>& byteVector, unsigned int num, int numBytes) {
       23:  502:    for (int i = numBytes - 1; i >= 0; --i) {
       14:  503:        byteVector.push_back((num >> (i * 8)) & 0xFF);
        -:  504:    }
        9:  505:}
