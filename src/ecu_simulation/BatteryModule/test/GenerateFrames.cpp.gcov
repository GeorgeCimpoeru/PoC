        -:    0:Source:src/GenerateFrames.cpp
        -:    0:Graph:./GenerateFrames.gcno
        -:    0:Data:./GenerateFrames.gcda
        -:    0:Runs:1
        -:    1:#include "../include/GenerateFrames.h"
        -:    2:
       39:    3:GenerateFrames::GenerateFrames(int socket)
        -:    4:{
       39:    5:    this->addSocket(socket);
       39:    6:}
        -:    7:
        1:    8:int GenerateFrames::getSocket()
        -:    9:{
        1:   10:    return this->socket;
        -:   11:}
        -:   12:
       42:   13:struct can_frame GenerateFrames::createFrame(int &id,  std::vector<int> &data, FrameType frameType)
        -:   14:{
        -:   15:    struct can_frame frame;
       42:   16:    switch (frameType)
        -:   17:    {
       41:   18:        case DATA_FRAME:
       41:   19:            frame.can_id = id & CAN_EFF_MASK;
       41:   20:            frame.can_dlc = data.size();
      236:   21:            for (int i = 0; i < frame.can_dlc; i++)
        -:   22:            {
      195:   23:                frame.data[i] = data[i];
        -:   24:            }
       41:   25:            break;
        1:   26:        case REMOTE_FRAME:
        1:   27:            frame.can_id = id & CAN_EFF_MASK;
        1:   28:            frame.can_id |= CAN_RTR_FLAG;
        1:   29:            frame.can_dlc = data.size();
        2:   30:            for (int i = 0; i < frame.can_dlc; i++) 
        -:   31:            {
        1:   32:                frame.data[i] = data[i];
        -:   33:            }
        1:   34:            break;
    #####:   35:        case ERROR_FRAME:
    #####:   36:            frame.can_id = CAN_ERR_FLAG;
    #####:   37:            frame.can_dlc = 0;
    #####:   38:            break;
    #####:   39:        case OVERLOAD_FRAME:
    #####:   40:            frame.can_id = CAN_ERR_FLAG;
    #####:   41:            frame.can_dlc = 0;
    #####:   42:            break;
    #####:   43:        default:
    #####:   44:            throw std::invalid_argument("Invalid frame type");
        -:   45:    }
       42:   46:    return frame;
        -:   47:}
        -:   48:
       42:   49:bool GenerateFrames::sendFrame(int id, std::vector<int> data, FrameType frameType)
        -:   50:{
       42:   51:    struct can_frame frame = createFrame(id, data, frameType);
       42:   52:    int nbytes = write(this->socket, &frame, sizeof(frame));
       42:   53:    if (nbytes != sizeof(frame))
        -:   54:    {
    #####:   55:        std::cout<<"Write error\n";
    #####:   56:        return -1;
        -:   57:    }
       42:   58:    return 0;
        -:   59:}
        -:   60:
       39:   61:void GenerateFrames::addSocket(int socket)
        -:   62:{
       39:   63:    if (socket >= 0)
        -:   64:    {
       39:   65:        this->socket = socket;
       39:   66:        return;
        -:   67:    }
    #####:   68:    std::cout<<"Error: Pass a valid Socket\n";
    #####:   69:    exit(EXIT_FAILURE);
        -:   70:}
        -:   71:
        2:   72:void GenerateFrames::sessionControl(int id, int sub_function, bool response)
        -:   73:{
        4:   74:    std::vector<int> data(3);
        2:   75:    if (!response)
        -:   76:    {
        1:   77:        data = {0x2,0x10,sub_function};
        1:   78:        this->sendFrame(id,data);
        1:   79:        return;
        -:   80:    }
        1:   81:    data = {0x2,0x50,sub_function};
        1:   82:    this->sendFrame(id, data);
        1:   83:    return;
        -:   84:}
        -:   85:
        2:   86:void GenerateFrames::ecuReset(int id, bool response)
        -:   87:{
        4:   88:    std::vector<int> data(3);
        2:   89:    if (!response)
        -:   90:    {
        1:   91:        data = {0x2,0x11,0x3};
        1:   92:        this->sendFrame(id, data);
        1:   93:        return;
        -:   94:    }
        1:   95:    data = {0x2,0x51,0x3};
        1:   96:    this->sendFrame(id, data);
        1:   97:    return;
        -:   98:}
        -:   99:
        2:  100:void GenerateFrames::authenticationRequestSeed(int id, const std::vector<int> &seed)
        -:  101:{
        2:  102:    if (seed.size() == 0)
        -:  103:    {
        1:  104:        std::vector<int> data = {0x03, 0x29, 0x1};
        1:  105:        this->sendFrame(id, data);
        1:  106:        return;
        -:  107:    }
        2:  108:    std::vector<int> data = {(int)seed.size() + 2, 0x69, 0x1};
        4:  109:    for (std::size_t i = 0; i < seed.size(); i++)
        -:  110:    {
        3:  111:        data.push_back(seed[i]);
        -:  112:    }
        1:  113:    this->sendFrame(id, data);
        1:  114:    return;
        -:  115:}
        -:  116:
        2:  117:void GenerateFrames::authenticationSendKey(int id, const std::vector<int> &key)
        -:  118:{
        2:  119:    if (key.size() > 0 )
        -:  120:    {
        1:  121:        std::vector<int> data = {(int)key.size() + 2, 0x29, 0x2};
        4:  122:        for (std::size_t i = 0; i<key.size(); i++)
        -:  123:        {
        3:  124:            data.push_back(key[i]);
        -:  125:        }
        1:  126:        this->sendFrame(id, data);
        1:  127:        return;
        -:  128:    }
        2:  129:    std::vector<int> data = {0x02,0x69,0x02};
        1:  130:    this->sendFrame(id, data);
        1:  131:    return;
        -:  132:}
        -:  133:
        2:  134:void GenerateFrames::routineControl(int id, int sub_function, int routin_identifier, bool response)
        -:  135:{
        2:  136:    if (!response)
        -:  137:    {
        1:  138:        std::vector<int> data = {0x4, 0x31, sub_function, routin_identifier / 0x100, routin_identifier % 0x100};
        1:  139:        this->sendFrame(id, data);
        1:  140:        return;
        -:  141:    }
        2:  142:    std::vector<int> data = {0x04,0x71, sub_function, routin_identifier / 0x100, routin_identifier % 0x100};
        1:  143:    this->sendFrame(id, data);
        1:  144:    return;
        -:  145:}
        -:  146:
        2:  147:void GenerateFrames::testerPresent(int id, bool response)
        -:  148:{
        2:  149:    if (!response)
        -:  150:    {
        1:  151:        std::vector<int> data = {0x02,0x3E,0x00};
        1:  152:        this->sendFrame(id, data);
        1:  153:        return;
        -:  154:    }
        2:  155:    std::vector<int> data = {0x02,0x7E,0x00};
        1:  156:    this->sendFrame(id, data);
        1:  157:    return;
        -:  158:}
        -:  159:
        2:  160:void GenerateFrames::readDataByIdentifier(int id,int identifier, std::vector<int> response )
        -:  161:{
        2:  162:    if (response.size() == 0)
        -:  163:    {
        1:  164:        std::vector<int> data = {0x03, 0x22, identifier/0x100, identifier%0x100};
        1:  165:        this->sendFrame(id, data);
        1:  166:        return;
        -:  167:    }
        1:  168:    int length_response = response.size();
        1:  169:    if (length_response <= 5)
        -:  170:    {
        1:  171:        std::vector<int> data = {length_response + 3, 0x62, identifier/0x100, identifier%0x100};
        3:  172:        for (int i = 0; i < length_response; i++)
        -:  173:        {
        2:  174:            data.push_back(response[i]);
        -:  175:        }
        1:  176:        this->sendFrame(id, data);
        1:  177:        return;
        -:  178:    }
    #####:  179:    std::cout<<"ERROR: The frame is to long!, consider using method ReadDataByIdentifierLongResponse\n";
    #####:  180:    return;
        -:  181:    /*
        -:  182:    According to documentation, the frame can
        -:  183:    request more than one DID. Future implementation
        -:  184:      |
        -:  185:      V
        -:  186:    */
        -:  187:}
        -:  188:
        4:  189:void GenerateFrames::generateFrameLongData(int id, int sid, int identifier, std::vector<int> response, bool first_frame)
        -:  190:{
        4:  191:    if (first_frame)
        -:  192:    {
        2:  193:        std::vector<int> data = {0x10, (int)response.size() + 3, sid, identifier/0x100, identifier%0x100};
        -:  194:        /*Send only 3 first bytes of data*/
        8:  195:        for (int i = 0; i < 3; i++)
        -:  196:        {
        6:  197:            data.push_back(response[i]);
        -:  198:        }
        2:  199:        this->sendFrame(id, data);
        2:  200:        return;
        -:  201:    }
        -:  202:    else
        -:  203:    {
        -:  204:        /*Delete first 3 data that were sended in the first frame */
        2:  205:        response.erase(response.begin(), response.begin() + 3);
        2:  206:        int size_of_response = response.size();
        2:  207:        std::vector<int> data;
        4:  208:        for (int i = 0; i <= size_of_response / 7; i++)
        -:  209:        {
        2:  210:            data = {0x21 + (i % 0xF)};
       10:  211:            for (int j = 0; j < 7 && ((i*7) + j) < size_of_response; j++)
        -:  212:            {
        8:  213:                data.push_back(response[(i*7)+j]);
        -:  214:            }
        2:  215:            this->sendFrame(id, data);
        -:  216:        }
        2:  217:        return;
        -:  218:    } 
        -:  219:}
        -:  220:
        2:  221:void GenerateFrames::readDataByIdentifierLongResponse(int id,int identifier, std::vector<int> response, bool first_frame)
        -:  222:{
        2:  223:    generateFrameLongData(id,0x62,identifier,response,first_frame);
        2:  224:}
        -:  225:
        1:  226:void GenerateFrames::flowControlFrame(int id)
        -:  227:{
        1:  228:    this->sendFrame(id, {0x30,0x00,0x00,0x00});
        1:  229:}
        -:  230:
        2:  231:void GenerateFrames::readMemoryByAddress(int id, int memory_size, int memory_address, std::vector<int> response )
        -:  232:{
        -:  233:    /*add lengths of of memory size/address to the frame*/
        2:  234:    int length_memory_size = (countDigits(memory_size) +1) / 2;
        2:  235:    int length_memory_address = (countDigits(memory_address) + 1) / 2;
        2:  236:    int length_memory = length_memory_size * 0x10 + length_memory_address;
        2:  237:    if (response.size() == 0)
        -:  238:    {
        1:  239:        int pci_l = length_memory_size + length_memory_address + 2;
        1:  240:        std::vector<int> data = {pci_l, 0x23, length_memory};
        -:  241:        /*add memory address and size to the frame*/
        1:  242:        insertBytes(data, memory_address, length_memory_address);
        1:  243:        insertBytes(data, memory_size, length_memory_size);
        1:  244:        this->sendFrame(id, data);
        1:  245:        return;
        -:  246:    }
        1:  247:    int pci_l = length_memory_size + length_memory_address + 2 + response.size();
        2:  248:    std::vector<int> data = {pci_l, 0x63, length_memory};
        -:  249:    /*add memory address and size to the frame*/
        1:  250:    insertBytes(data, memory_address, length_memory_address);
        1:  251:    insertBytes(data, memory_size, length_memory_size);
        1:  252:    if (data.size() + response.size() < 9)
        -:  253:    {
        3:  254:        for (std::size_t i = 0; i < response.size(); i++)
        -:  255:        {
        2:  256:            data.push_back(response[i]);
        -:  257:        }
        1:  258:        this->sendFrame(id, data);
        1:  259:        return;
        -:  260:    } else
        -:  261:    {
    #####:  262:        std::cout<<"ERROR: Response to long, consider using ReadMemoryByAdressLongResponse method\n";
    #####:  263:        return;
        -:  264:    }
        -:  265:}
        -:  266:
        2:  267:void GenerateFrames::readMemoryByAddressLongResponse(int id, int memory_size, int memory_address, std::vector<int> response, bool first_frame)
        -:  268:{
        -:  269:    /*add lengths of of memory size/address to the frame*/
        2:  270:    int length_memory_size = (countDigits(memory_size) +1) / 2;
        2:  271:    int length_memory_address = (countDigits(memory_address) + 1) / 2;
        2:  272:    int length_memory = length_memory_size * 0x10 + length_memory_address;
        2:  273:    if (first_frame)
        -:  274:    {
        1:  275:        int pci_l = (int)response.size() + 2 + length_memory_size + length_memory_address;
        1:  276:        std::vector<int> data = {0x10, pci_l, 0x63, length_memory};
        -:  277:        /*add memory address and size to the frame*/
        1:  278:        insertBytes(data, memory_address, length_memory_address);
        1:  279:        insertBytes(data, memory_size, length_memory_size);
        -:  280:        /*Send only 3 first bytes of data*/
        2:  281:        for (std::size_t i = 0; i < (data.size() - 8); i++)
        -:  282:        {
        1:  283:            data.push_back(response[i]);
        -:  284:        }
        1:  285:        this->sendFrame(id, data);
        1:  286:        return;
        -:  287:    }
        -:  288:    else
        -:  289:    {
        1:  290:        int memory_allready_send = 8 - (length_memory_address + length_memory_size + 4);
        -:  291:        /*Delete data allready sended*/
        1:  292:        response.erase(response.begin(), response.begin() + memory_allready_send);
        1:  293:        int size_of_response = response.size();
        1:  294:        std::vector<int> data;
        2:  295:        for (int i = 0; i <= size_of_response / 7; i++)
        -:  296:        {
        1:  297:            data = {0x21 + (i % 0xF)};
        6:  298:            for (int j = 0; j < 7 && ((i*7) + j) < size_of_response; j++)
        -:  299:            {
        5:  300:                data.push_back(response[(i*7)+j]);
        -:  301:            }
        1:  302:            this->sendFrame(id, data);
        -:  303:        }
        1:  304:        return;
        -:  305:    } 
        -:  306:    return;
        -:  307:}
        -:  308:
        2:  309:void GenerateFrames::writeDataByIdentifier(int id, int identifier, std::vector<int> data_parameter )
        -:  310:{
        2:  311:    if (data_parameter.size() > 0)
        -:  312:    {
        1:  313:        if (data_parameter.size() <= 4)
        -:  314:        {
        1:  315:            std::vector<int> data = {(int)data_parameter.size() + 3,0x2E, identifier/0x100,identifier%0x100};
        3:  316:            for (int j = 0; j < data_parameter.size(); j++)
        -:  317:            {
        2:  318:                data.push_back(data_parameter[j]);
        -:  319:            }
        1:  320:            this->sendFrame(id, data);
        1:  321:            return;
        -:  322:        }
        -:  323:        else
        -:  324:        {
    #####:  325:            std::cout<<"The data_parameter is to long. Consider using WriteDataByIdentifierLongData method\n";
    #####:  326:            return;
        -:  327:        }
        -:  328:    }
        2:  329:    std::vector<int> data = {0x03, 0x6E, identifier/0x100,identifier%0x100};
        1:  330:    this->sendFrame(id, data);
        1:  331:    return;
        -:  332:}
        -:  333:
        2:  334:void GenerateFrames::writeDataByIdentifierLongData(int id, int identifier, std::vector<int> data_parameter, bool first_frame)
        -:  335:{
        2:  336:    generateFrameLongData(id,0x2E,identifier,data_parameter,first_frame);
        2:  337:}
        -:  338:
        1:  339:void GenerateFrames::readDtcInformation(int id, int sub_function, int dtc_status_mask)
        -:  340:{
        2:  341:    std::vector<int> data = {0x03, 0x19, sub_function, dtc_status_mask};
        1:  342:    this->sendFrame(id, data);
        2:  343:    return;
        -:  344:}
        -:  345:
        1:  346:void GenerateFrames::readDtcInformationResponse01(int id, int status_availability_mask, int dtc_format_identifier, int dtc_count)
        -:  347:{
        2:  348:    std::vector<int> data = {0x03, 0x59, 0x01, status_availability_mask, dtc_format_identifier, dtc_count};
        1:  349:    this->sendFrame(id, data);
        2:  350:    return;
        -:  351:}
        -:  352:
        2:  353:void GenerateFrames::clearDiagnosticInformation(int id, std::vector<int> group_of_dtc, bool response)
        -:  354:{
        4:  355:    std::vector<int> data;
        -:  356:    /*Request*/
        2:  357:    if (!response)
        -:  358:    { 
        1:  359:        if (group_of_dtc.size() < 8)
        -:  360:        {
        1:  361:            int number_of_dtc = group_of_dtc.size();
        1:  362:            data = {number_of_dtc + 1, 0x14};
        4:  363:            for (int i = 0; i < number_of_dtc; i++)
        -:  364:            {
        3:  365:                data.push_back(group_of_dtc[i]);
        -:  366:            }
        1:  367:            this->sendFrame(id, data);
        1:  368:            return;
        -:  369:        } else
        -:  370:        {
    #####:  371:            std::cout<<"ERROR: Can't send more than 7 DTC/frame, please consider send 2 or more frames\n";
    #####:  372:            return;
        -:  373:        }
        -:  374:        
        -:  375:    }
        -:  376:    /*Response*/
        1:  377:    data = {0x01, 0x54};
        1:  378:    this->sendFrame(id, data);
        1:  379:    return;
        -:  380:}
        -:  381:
        2:  382:void GenerateFrames::accessTimingParameters(int id, int sub_function, bool response)
        -:  383:{
        2:  384:    if (!response)
        -:  385:    {
        1:  386:        std::vector<int> data = {0x02, 0x83, sub_function};
        1:  387:        this->sendFrame(id, data);
        1:  388:        return;
        -:  389:    }
        2:  390:    std::vector<int> data = {0x02, 0xC3, sub_function};
        1:  391:    this->sendFrame(id, data);
        1:  392:    return;
        -:  393:}
        -:  394:
        1:  395:void GenerateFrames::negativeResponse(int id, int nrc)
        -:  396:{
        2:  397:    std::vector<int> data = {0x03, 0x7F, nrc};
        1:  398:    this->sendFrame(id, data);
        2:  399:    return;
        -:  400:}
        -:  401:
        -:  402:/*https://piembsystech.com/request-download-0x34-service-uds-protocol/*/
        1:  403:void GenerateFrames::requestDownload(int id, int data_format_identifier, int memory_address, int memory_size)
        -:  404:{
        -:  405:    /* Request Frame
        -:  406:    add lengths of of memory size/address to the frame*/
        1:  407:    int length_memory_size = countDigits(memory_size + 1) / 2;
        1:  408:    int length_memory_address = countDigits(memory_address + 1) / 2;
        1:  409:    int length_memory = length_memory_size * 0x10 + length_memory_address;
        1:  410:    int pci_length = length_memory_size + length_memory_address + 3; //pci_l
        2:  411:    std::vector<int> data = {pci_length, 0x34, data_format_identifier, length_memory}; //pci_l
        -:  412:    /*add memory address and size to the frame*/
        1:  413:    insertBytes(data, memory_address, length_memory_address);
        1:  414:    insertBytes(data, memory_size, length_memory_size);
        1:  415:    this->sendFrame(id, data);
        2:  416:    return;
        -:  417:}
        -:  418:
        1:  419:void GenerateFrames::requestDownloadResponse(int id, int max_number_block)
        -:  420:{
        -:  421:    /*Response frame*/
        1:  422:    int length_max_number_block = (countDigits(max_number_block) + 1) / 2;
        2:  423:    std::vector<int> data = {length_max_number_block + 2, 0x74, (length_max_number_block * 0x10)}; //pci_l
        1:  424:    insertBytes(data, max_number_block, length_max_number_block);
        1:  425:    this->sendFrame(id, data);
        2:  426:    return;
        -:  427:}
        -:  428:
        3:  429:void GenerateFrames::transferData(int id, int block_sequence_counter, std::vector<int> transfer_request)
        -:  430:{
        -:  431:    /*If is not a response*/
        3:  432:    if (transfer_request.size() != 0)
        -:  433:    {
        2:  434:        std::vector<int> data = {(int)transfer_request.size() + 2, 0x36, block_sequence_counter}; //pci_l
       10:  435:        for (std::size_t i = 0; i < transfer_request.size(); i++)
        -:  436:        {
        8:  437:            data.push_back(transfer_request[i]);
        -:  438:        }
        2:  439:        this->sendFrame(id, data);
        2:  440:        return;
        -:  441:    }
        -:  442:    /*Response frame*/
        2:  443:    std::vector<int> data = {0x02,0x76,block_sequence_counter}; //pci_l
        1:  444:    this->sendFrame(id, data);
        1:  445:    return;
        -:  446:}
        -:  447:
        2:  448:void GenerateFrames::transferDataLong(int id, int block_sequence_counter, std::vector<int> transfer_request, bool first_frame)
        -:  449:{
        2:  450:    if (first_frame)
        -:  451:    {
        1:  452:        std::vector<int> data = {0x10, ((int)transfer_request.size() + 2), 0x36, block_sequence_counter};
        5:  453:        for (int i = 0; i < 4 ; i++)
        -:  454:        {
        4:  455:            data.push_back(transfer_request[i]);
        -:  456:        }
        1:  457:        this->sendFrame(id, data);
        1:  458:        return;
        -:  459:    }
        -:  460:    else
        -:  461:    {
        -:  462:        /*Delete first 3 data that were sended in the first frame*/
        1:  463:        transfer_request.erase(transfer_request.begin(), transfer_request.begin() + 4);
        1:  464:        int size_of_data = transfer_request.size();
        1:  465:        std::vector<int> data;
        2:  466:        for (int i = 0; i <= size_of_data / 7; i++)
        -:  467:        {
        1:  468:            data = {0x21 + (i % 0xF)};
        4:  469:            for (int j = 0; j < 7 && ((i*7) + j) < size_of_data; j++)
        -:  470:            {
        3:  471:                data.push_back(transfer_request[(i*7)+j]);
        -:  472:            }
        1:  473:            this->sendFrame(id, data);
        -:  474:        }
        1:  475:        return;
        -:  476:    } 
        -:  477:}
        -:  478:
        2:  479:void GenerateFrames::requestTransferExit(int id, bool response)
        -:  480:{
        2:  481:    if (!response)
        -:  482:    {
        1:  483:        std::vector<int> data = {0x01, 0x37};
        1:  484:        this->sendFrame(id, data);
        1:  485:        return;
        -:  486:    }
        2:  487:    std::vector<int> data = {0x01,0x77};
        1:  488:    this->sendFrame(id, data);
        1:  489:    return;
        -:  490:}
        -:  491:
    #####:  492:bool GenerateFrames::requestUpdateStatus(int id, bool response)
        -:  493:{
        -:  494:    /*No impplementation, I don't find this service in the standart*/
    #####:  495:    return false;
        -:  496:}
        -:  497:
        -:  498:/*Private*/
       11:  499:int GenerateFrames::countDigits(int number)
        -:  500:{
       11:  501:    int digits = 0;
       11:  502:    if (number < 0) 
    #####:  503:        digits = 1;
       42:  504:    while (number) {
       31:  505:        number /= 10;
       31:  506:        digits++;
        -:  507:    }
       11:  508:    return digits;
        -:  509:}
        -:  510:
        9:  511:void GenerateFrames::insertBytes(std::vector<int>& byteVector, unsigned int num, int numBytes) {
       23:  512:    for (int i = numBytes - 1; i >= 0; --i) {
       14:  513:        byteVector.push_back((num >> (i * 8)) & 0xFF);
        -:  514:    }
        9:  515:}
